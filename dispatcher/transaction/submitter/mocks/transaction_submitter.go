// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cometbft/cometbft/types"
)

// TransactionSubmitter is an autogenerated mock type for the TransactionSubmitter type
type TransactionSubmitter struct {
	mock.Mock
}

type TransactionSubmitter_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionSubmitter) EXPECT() *TransactionSubmitter_Expecter {
	return &TransactionSubmitter_Expecter{mock: &_m.Mock}
}

// Submit provides a mock function with given fields: ctx, tx
func (_m *TransactionSubmitter) Submit(ctx context.Context, tx types.Tx) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionSubmitter_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type TransactionSubmitter_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - ctx context.Context
//   - tx types.Tx
func (_e *TransactionSubmitter_Expecter) Submit(ctx interface{}, tx interface{}) *TransactionSubmitter_Submit_Call {
	return &TransactionSubmitter_Submit_Call{Call: _e.mock.On("Submit", ctx, tx)}
}

func (_c *TransactionSubmitter_Submit_Call) Run(run func(ctx context.Context, tx types.Tx)) *TransactionSubmitter_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Tx))
	})
	return _c
}

func (_c *TransactionSubmitter_Submit_Call) Return(_a0 error) *TransactionSubmitter_Submit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionSubmitter_Submit_Call) RunAndReturn(run func(context.Context, types.Tx) error) *TransactionSubmitter_Submit_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionSubmitter creates a new instance of TransactionSubmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionSubmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionSubmitter {
	mock := &TransactionSubmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
