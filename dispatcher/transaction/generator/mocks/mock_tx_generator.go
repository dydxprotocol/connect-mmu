// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	cometbfttypes "github.com/cometbft/cometbft/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// TransactionGenerator is an autogenerated mock type for the TransactionGenerator type
type TransactionGenerator struct {
	mock.Mock
}

type TransactionGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionGenerator) EXPECT() *TransactionGenerator_Expecter {
	return &TransactionGenerator_Expecter{mock: &_m.Mock}
}

// GenerateTransactions provides a mock function with given fields: ctx, msgs
func (_m *TransactionGenerator) GenerateTransactions(ctx context.Context, msgs []types.Msg) ([]cometbfttypes.Tx, error) {
	ret := _m.Called(ctx, msgs)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTransactions")
	}

	var r0 []cometbfttypes.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.Msg) ([]cometbfttypes.Tx, error)); ok {
		return rf(ctx, msgs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []types.Msg) []cometbfttypes.Tx); ok {
		r0 = rf(ctx, msgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cometbfttypes.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []types.Msg) error); ok {
		r1 = rf(ctx, msgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionGenerator_GenerateTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTransactions'
type TransactionGenerator_GenerateTransactions_Call struct {
	*mock.Call
}

// GenerateTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs []types.Msg
func (_e *TransactionGenerator_Expecter) GenerateTransactions(ctx interface{}, msgs interface{}) *TransactionGenerator_GenerateTransactions_Call {
	return &TransactionGenerator_GenerateTransactions_Call{Call: _e.mock.On("GenerateTransactions", ctx, msgs)}
}

func (_c *TransactionGenerator_GenerateTransactions_Call) Run(run func(ctx context.Context, msgs []types.Msg)) *TransactionGenerator_GenerateTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]types.Msg))
	})
	return _c
}

func (_c *TransactionGenerator_GenerateTransactions_Call) Return(_a0 []cometbfttypes.Tx, _a1 error) *TransactionGenerator_GenerateTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionGenerator_GenerateTransactions_Call) RunAndReturn(run func(context.Context, []types.Msg) ([]cometbfttypes.Tx, error)) *TransactionGenerator_GenerateTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionGenerator creates a new instance of TransactionGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionGenerator {
	mock := &TransactionGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
