// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	tx "github.com/cosmos/cosmos-sdk/client/tx"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// GasEstimator is an autogenerated mock type for the GasEstimator type
type GasEstimator struct {
	mock.Mock
}

type GasEstimator_Expecter struct {
	mock *mock.Mock
}

func (_m *GasEstimator) EXPECT() *GasEstimator_Expecter {
	return &GasEstimator_Expecter{mock: &_m.Mock}
}

// Estimate provides a mock function with given fields: txf, msgs
func (_m *GasEstimator) Estimate(txf tx.Factory, msgs []types.Msg) (uint64, error) {
	ret := _m.Called(txf, msgs)

	if len(ret) == 0 {
		panic("no return value specified for Estimate")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(tx.Factory, []types.Msg) (uint64, error)); ok {
		return rf(txf, msgs)
	}
	if rf, ok := ret.Get(0).(func(tx.Factory, []types.Msg) uint64); ok {
		r0 = rf(txf, msgs)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(tx.Factory, []types.Msg) error); ok {
		r1 = rf(txf, msgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GasEstimator_Estimate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Estimate'
type GasEstimator_Estimate_Call struct {
	*mock.Call
}

// Estimate is a helper method to define mock.On call
//   - txf tx.Factory
//   - msgs []types.Msg
func (_e *GasEstimator_Expecter) Estimate(txf interface{}, msgs interface{}) *GasEstimator_Estimate_Call {
	return &GasEstimator_Estimate_Call{Call: _e.mock.On("Estimate", txf, msgs)}
}

func (_c *GasEstimator_Estimate_Call) Run(run func(txf tx.Factory, msgs []types.Msg)) *GasEstimator_Estimate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tx.Factory), args[1].([]types.Msg))
	})
	return _c
}

func (_c *GasEstimator_Estimate_Call) Return(_a0 uint64, _a1 error) *GasEstimator_Estimate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GasEstimator_Estimate_Call) RunAndReturn(run func(tx.Factory, []types.Msg) (uint64, error)) *GasEstimator_Estimate_Call {
	_c.Call.Return(run)
	return _c
}

// NewGasEstimator creates a new instance of GasEstimator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGasEstimator(t interface {
	mock.TestingT
	Cleanup(func())
}) *GasEstimator {
	mock := &GasEstimator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
