// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	raydium "github.com/skip-mev/connect-mmu/market-indexer/ingesters/raydium"

	rpc "github.com/gagliardetto/solana-go/rpc"

	solana "github.com/gagliardetto/solana-go"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// GetMultipleAccounts provides a mock function with given fields: ctx, accounts
func (_m *Client) GetMultipleAccounts(ctx context.Context, accounts []solana.PublicKey) ([]*rpc.Account, error) {
	ret := _m.Called(ctx, accounts)

	if len(ret) == 0 {
		panic("no return value specified for GetMultipleAccounts")
	}

	var r0 []*rpc.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []solana.PublicKey) ([]*rpc.Account, error)); ok {
		return rf(ctx, accounts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []solana.PublicKey) []*rpc.Account); ok {
		r0 = rf(ctx, accounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rpc.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []solana.PublicKey) error); ok {
		r1 = rf(ctx, accounts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetMultipleAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultipleAccounts'
type Client_GetMultipleAccounts_Call struct {
	*mock.Call
}

// GetMultipleAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - accounts []solana.PublicKey
func (_e *Client_Expecter) GetMultipleAccounts(ctx interface{}, accounts interface{}) *Client_GetMultipleAccounts_Call {
	return &Client_GetMultipleAccounts_Call{Call: _e.mock.On("GetMultipleAccounts", ctx, accounts)}
}

func (_c *Client_GetMultipleAccounts_Call) Run(run func(ctx context.Context, accounts []solana.PublicKey)) *Client_GetMultipleAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]solana.PublicKey))
	})
	return _c
}

func (_c *Client_GetMultipleAccounts_Call) Return(_a0 []*rpc.Account, _a1 error) *Client_GetMultipleAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetMultipleAccounts_Call) RunAndReturn(run func(context.Context, []solana.PublicKey) ([]*rpc.Account, error)) *Client_GetMultipleAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// Pairs provides a mock function with given fields: ctx
func (_m *Client) Pairs(ctx context.Context) (raydium.Pairs, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Pairs")
	}

	var r0 raydium.Pairs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (raydium.Pairs, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) raydium.Pairs); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raydium.Pairs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Pairs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pairs'
type Client_Pairs_Call struct {
	*mock.Call
}

// Pairs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) Pairs(ctx interface{}) *Client_Pairs_Call {
	return &Client_Pairs_Call{Call: _e.mock.On("Pairs", ctx)}
}

func (_c *Client_Pairs_Call) Run(run func(ctx context.Context)) *Client_Pairs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_Pairs_Call) Return(_a0 raydium.Pairs, _a1 error) *Client_Pairs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Pairs_Call) RunAndReturn(run func(context.Context) (raydium.Pairs, error)) *Client_Pairs_Call {
	_c.Call.Return(run)
	return _c
}

// TokenMetadata provides a mock function with given fields: ctx
func (_m *Client) TokenMetadata(ctx context.Context) (raydium.TokenMetadataResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TokenMetadata")
	}

	var r0 raydium.TokenMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (raydium.TokenMetadataResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) raydium.TokenMetadataResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(raydium.TokenMetadataResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_TokenMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenMetadata'
type Client_TokenMetadata_Call struct {
	*mock.Call
}

// TokenMetadata is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) TokenMetadata(ctx interface{}) *Client_TokenMetadata_Call {
	return &Client_TokenMetadata_Call{Call: _e.mock.On("TokenMetadata", ctx)}
}

func (_c *Client_TokenMetadata_Call) Run(run func(ctx context.Context)) *Client_TokenMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_TokenMetadata_Call) Return(_a0 raydium.TokenMetadataResponse, _a1 error) *Client_TokenMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_TokenMetadata_Call) RunAndReturn(run func(context.Context) (raydium.TokenMetadataResponse, error)) *Client_TokenMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
