// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	gecko "github.com/skip-mev/connect-mmu/market-indexer/ingesters/gecko"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// MultiToken provides a mock function with given fields: ctx, network, tokens
func (_m *Client) MultiToken(ctx context.Context, network string, tokens []string) (*gecko.TokensMultiResponse, error) {
	ret := _m.Called(ctx, network, tokens)

	if len(ret) == 0 {
		panic("no return value specified for MultiToken")
	}

	var r0 *gecko.TokensMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (*gecko.TokensMultiResponse, error)); ok {
		return rf(ctx, network, tokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) *gecko.TokensMultiResponse); ok {
		r0 = rf(ctx, network, tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gecko.TokensMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, network, tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_MultiToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiToken'
type Client_MultiToken_Call struct {
	*mock.Call
}

// MultiToken is a helper method to define mock.On call
//   - ctx context.Context
//   - network string
//   - tokens []string
func (_e *Client_Expecter) MultiToken(ctx interface{}, network interface{}, tokens interface{}) *Client_MultiToken_Call {
	return &Client_MultiToken_Call{Call: _e.mock.On("MultiToken", ctx, network, tokens)}
}

func (_c *Client_MultiToken_Call) Run(run func(ctx context.Context, network string, tokens []string)) *Client_MultiToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *Client_MultiToken_Call) Return(_a0 *gecko.TokensMultiResponse, _a1 error) *Client_MultiToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_MultiToken_Call) RunAndReturn(run func(context.Context, string, []string) (*gecko.TokensMultiResponse, error)) *Client_MultiToken_Call {
	_c.Call.Return(run)
	return _c
}

// TopPools provides a mock function with given fields: ctx, network, dex, page
func (_m *Client) TopPools(ctx context.Context, network string, dex string, page int) (*gecko.PoolsResponse, error) {
	ret := _m.Called(ctx, network, dex, page)

	if len(ret) == 0 {
		panic("no return value specified for TopPools")
	}

	var r0 *gecko.PoolsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) (*gecko.PoolsResponse, error)); ok {
		return rf(ctx, network, dex, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *gecko.PoolsResponse); ok {
		r0 = rf(ctx, network, dex, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gecko.PoolsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, network, dex, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_TopPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopPools'
type Client_TopPools_Call struct {
	*mock.Call
}

// TopPools is a helper method to define mock.On call
//   - ctx context.Context
//   - network string
//   - dex string
//   - page int
func (_e *Client_Expecter) TopPools(ctx interface{}, network interface{}, dex interface{}, page interface{}) *Client_TopPools_Call {
	return &Client_TopPools_Call{Call: _e.mock.On("TopPools", ctx, network, dex, page)}
}

func (_c *Client_TopPools_Call) Run(run func(ctx context.Context, network string, dex string, page int)) *Client_TopPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *Client_TopPools_Call) Return(_a0 *gecko.PoolsResponse, _a1 error) *Client_TopPools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_TopPools_Call) RunAndReturn(run func(context.Context, string, string, int) (*gecko.PoolsResponse, error)) *Client_TopPools_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
