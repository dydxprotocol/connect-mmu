// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	coinbase "github.com/skip-mev/connect-mmu/market-indexer/ingesters/coinbase"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Products provides a mock function with given fields: _a0
func (_m *Client) Products(_a0 context.Context) (coinbase.Products, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Products")
	}

	var r0 coinbase.Products
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (coinbase.Products, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) coinbase.Products); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coinbase.Products)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Products_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Products'
type Client_Products_Call struct {
	*mock.Call
}

// Products is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Client_Expecter) Products(_a0 interface{}) *Client_Products_Call {
	return &Client_Products_Call{Call: _e.mock.On("Products", _a0)}
}

func (_c *Client_Products_Call) Run(run func(_a0 context.Context)) *Client_Products_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_Products_Call) Return(_a0 coinbase.Products, _a1 error) *Client_Products_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Products_Call) RunAndReturn(run func(context.Context) (coinbase.Products, error)) *Client_Products_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function with given fields: _a0
func (_m *Client) Stats(_a0 context.Context) (coinbase.Stats, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 coinbase.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (coinbase.Stats, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) coinbase.Stats); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coinbase.Stats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type Client_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Client_Expecter) Stats(_a0 interface{}) *Client_Stats_Call {
	return &Client_Stats_Call{Call: _e.mock.On("Stats", _a0)}
}

func (_c *Client_Stats_Call) Run(run func(_a0 context.Context)) *Client_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_Stats_Call) Return(_a0 coinbase.Stats, _a1 error) *Client_Stats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Stats_Call) RunAndReturn(run func(context.Context) (coinbase.Stats, error)) *Client_Stats_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
