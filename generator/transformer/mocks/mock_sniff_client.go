// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SniffClient is an autogenerated mock type for the SniffClient type
type SniffClient struct {
	mock.Mock
}

type SniffClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SniffClient) EXPECT() *SniffClient_Expecter {
	return &SniffClient_Expecter{mock: &_m.Mock}
}

// IsTokenAScam provides a mock function with given fields: ctx, chain, contractAddress
func (_m *SniffClient) IsTokenAScam(ctx context.Context, chain string, contractAddress string) (bool, error) {
	ret := _m.Called(ctx, chain, contractAddress)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenAScam")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, chain, contractAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, chain, contractAddress)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, chain, contractAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SniffClient_IsTokenAScam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenAScam'
type SniffClient_IsTokenAScam_Call struct {
	*mock.Call
}

// IsTokenAScam is a helper method to define mock.On call
//   - ctx context.Context
//   - chain string
//   - contractAddress string
func (_e *SniffClient_Expecter) IsTokenAScam(ctx interface{}, chain interface{}, contractAddress interface{}) *SniffClient_IsTokenAScam_Call {
	return &SniffClient_IsTokenAScam_Call{Call: _e.mock.On("IsTokenAScam", ctx, chain, contractAddress)}
}

func (_c *SniffClient_IsTokenAScam_Call) Run(run func(ctx context.Context, chain string, contractAddress string)) *SniffClient_IsTokenAScam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SniffClient_IsTokenAScam_Call) Return(_a0 bool, _a1 error) *SniffClient_IsTokenAScam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SniffClient_IsTokenAScam_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *SniffClient_IsTokenAScam_Call {
	_c.Call.Return(run)
	return _c
}

// NewSniffClient creates a new instance of SniffClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSniffClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SniffClient {
	mock := &SniffClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
