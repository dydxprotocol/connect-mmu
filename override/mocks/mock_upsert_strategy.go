// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/skip-mev/connect/v2/x/marketmap/types"

	update "github.com/skip-mev/connect-mmu/override/update"

	zap "go.uber.org/zap"
)

// MarketMapOverride is an autogenerated mock type for the MarketMapOverride type
type MarketMapOverride struct {
	mock.Mock
}

type MarketMapOverride_Expecter struct {
	mock *mock.Mock
}

func (_m *MarketMapOverride) EXPECT() *MarketMapOverride_Expecter {
	return &MarketMapOverride_Expecter{mock: &_m.Mock}
}

// OverrideGeneratedMarkets provides a mock function with given fields: ctx, logger, actual, generated, options
func (_m *MarketMapOverride) OverrideGeneratedMarkets(ctx context.Context, logger *zap.Logger, actual types.MarketMap, generated types.MarketMap, options update.Options) (types.MarketMap, []string, error) {
	ret := _m.Called(ctx, logger, actual, generated, options)

	if len(ret) == 0 {
		panic("no return value specified for OverrideGeneratedMarkets")
	}

	var r0 types.MarketMap
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, types.MarketMap, types.MarketMap, update.Options) (types.MarketMap, []string, error)); ok {
		return rf(ctx, logger, actual, generated, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, types.MarketMap, types.MarketMap, update.Options) types.MarketMap); ok {
		r0 = rf(ctx, logger, actual, generated, options)
	} else {
		r0 = ret.Get(0).(types.MarketMap)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *zap.Logger, types.MarketMap, types.MarketMap, update.Options) []string); ok {
		r1 = rf(ctx, logger, actual, generated, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *zap.Logger, types.MarketMap, types.MarketMap, update.Options) error); ok {
		r2 = rf(ctx, logger, actual, generated, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MarketMapOverride_OverrideGeneratedMarkets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverrideGeneratedMarkets'
type MarketMapOverride_OverrideGeneratedMarkets_Call struct {
	*mock.Call
}

// OverrideGeneratedMarkets is a helper method to define mock.On call
//   - ctx context.Context
//   - logger *zap.Logger
//   - actual types.MarketMap
//   - generated types.MarketMap
//   - options update.Options
func (_e *MarketMapOverride_Expecter) OverrideGeneratedMarkets(ctx interface{}, logger interface{}, actual interface{}, generated interface{}, options interface{}) *MarketMapOverride_OverrideGeneratedMarkets_Call {
	return &MarketMapOverride_OverrideGeneratedMarkets_Call{Call: _e.mock.On("OverrideGeneratedMarkets", ctx, logger, actual, generated, options)}
}

func (_c *MarketMapOverride_OverrideGeneratedMarkets_Call) Run(run func(ctx context.Context, logger *zap.Logger, actual types.MarketMap, generated types.MarketMap, options update.Options)) *MarketMapOverride_OverrideGeneratedMarkets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*zap.Logger), args[2].(types.MarketMap), args[3].(types.MarketMap), args[4].(update.Options))
	})
	return _c
}

func (_c *MarketMapOverride_OverrideGeneratedMarkets_Call) Return(_a0 types.MarketMap, _a1 []string, _a2 error) *MarketMapOverride_OverrideGeneratedMarkets_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MarketMapOverride_OverrideGeneratedMarkets_Call) RunAndReturn(run func(context.Context, *zap.Logger, types.MarketMap, types.MarketMap, update.Options) (types.MarketMap, []string, error)) *MarketMapOverride_OverrideGeneratedMarkets_Call {
	_c.Call.Return(run)
	return _c
}

// NewMarketMapOverride creates a new instance of MarketMapOverride. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMarketMapOverride(t interface {
	mock.TestingT
	Cleanup(func())
}) *MarketMapOverride {
	mock := &MarketMapOverride{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
